@page "/"
@using MyBlog.Data.Interfaces
@using MyBlog.Data.Models
@using Markdig
@inject IMyBlogApi api


<Virtualize @ref="virtualize" ItemsProvider="LoadPosts" Context="p">
    <article>
        <br />
        <h2>@p.Title</h2>
        @((MarkupString)GetFirstParagraph(Markdig.Markdown.ToHtml(p.Text, pipeline)))
        <a href="/Post/@p.Id">Read more</a>
        <br />
    </article>
</Virtualize>


@code
{
    private Virtualize<BlogPost> virtualize { get; set; }
    public int totalBlogPosts { get; set; }
    private async ValueTask<ItemsProviderResult<BlogPost>>LoadPosts(ItemsProviderRequest request)
    {
        if (totalBlogPosts == 0)
        {
            totalBlogPosts = await api.GetBlogPostCountAsync();
        }
        var numBlogPosts = Math.Min(request.Count, totalBlogPosts - request.StartIndex);
        var blogPosts = await api.GetBlogPostsAsync(numBlogPosts, request.StartIndex);
        return new ItemsProviderResult<BlogPost>(blogPosts, totalBlogPosts);
    }

    public string GetFirstParagraph(string html)
    {
        var m = System.Text.RegularExpressions.
        Regex.Matches(html, @"<p>(.*?)</p>", System.Text.RegularExpressions.RegexOptions.Singleline);
        if (m.Count > 0)
        {
            return m[0].Groups[1].Value;
        }
        else
        {
            return "";
        }
    }
    MarkdownPipeline pipeline;
    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder().UseEmojiAndSmiley().Build();
        return base.OnInitializedAsync();
    }

}


